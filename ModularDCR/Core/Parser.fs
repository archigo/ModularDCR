// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


// vi: ft=fsharp

open DCR
open D

type rel = CON of int | RES of int | INC | EXC | MIL | CONRES

type evt = string * label * List<string * string>
type evts = Excl of evts
          | Exec of int * evts
          | Incl of evts
          | Pend of int * evts 
          | Local of evts
          | Evt of evt
          | Seq of evts list
          | Sub of evt * dcr

type evinfo = { ev:    string;
                l:     string option; 
                tags : List<string * string> }

let lab (evi : evinfo) = match (evi.l) with
                         | Some l -> l
                         | None -> evi.ev

let extend x y G = 
    match Map.tryFind x G with 
      Some s -> Map.add x (Set.add y s) G
    | None -> Map.add x (Set.singleton y) G

type state = { 
    excl: bool ; incl : bool ; pend : int option ; local : bool ; exec : int option
}

let rec labelled_evts_of = function
    | Excl ex -> labelled_evts_of ex
    | Exec (_, ex) -> labelled_evts_of ex
    | Incl ex -> labelled_evts_of ex
    | Pend (_, ex) -> labelled_evts_of ex
    | Local ex -> labelled_evts_of ex
    | Evt (e, l, t) -> [e,l,t]
    | Seq exs -> List.collect labelled_evts_of exs
    | Sub ((e,l,t), _) -> [e,l,t]

let evts_of = labelled_evts_of >> List.map (fun (x,_,_) -> x) 

let add_event (G0 : dcr) (ex :evts) = 
    let rec loop (s : state) G = function 
        | Excl ex      -> loop { s with excl=true ; incl = false } G ex
        | Exec (k, ex) -> loop { s with exec=Some k } G ex
        | Incl ex      -> loop { s with incl=true ; excl = false } G ex
        | Pend (d, ex) -> loop { s with pend=Some d } G ex
        | Local ex     -> loop { s with local=true } G ex
        | Evt (e,l,t)  -> 
            { G with 
                events = Set.add e G.events 
                labels = match Map.tryFind e G.labels, l with
                         | None, _ -> Map.add e l G.labels
                         | Some l0, l1 when l0 = l1 -> G.labels
                         | Some (Neutral h0), l1 when h0 = e -> Map.add e l1 G.labels
                         | Some l0, (Neutral h1) when h1 = e -> Map.add e l0 G.labels
                         | _ -> error 0030 "Event '%s' has multiple incompatible labels." e
                local  = if s.local then 
                            if Set.contains e G.local then
                                error 0031 "Re-localisation of event '%s' (Barendrecht violation local/local)." e
                            elif Set.contains e G.events then
                                error 0032 "Localisation of event '%s' (Barendrecht violation shared/local)." e
                            else 
                                Set.add e G.local
                         else G.local   
                insi = match s.incl, s.excl with 
                         true, _ -> Set.add e G.insi
                       | _, true -> Set.remove e G.insi 
                       | false, false -> 
                              if Set.contains e G.events
                              then G.insi
                              else Set.add e G.insi
                              (* If we weren't explicitly required to
                                 include or exclude an event, we 
                                 include it if this is the first time
                                 we see it, otherwise do nothing. *)
                exec = 
                  match s.exec with
                  | None -> G.exec
                  | Some k -> Set.add e G.exec

                pend = 
                  match s.pend with
                  | None -> G.pend
                  | Some d -> Set.add e G.pend

                tags = 
                    let ts = match Map.tryFind e G.tags with
                             | Some ts -> ts
                             | None -> Map.empty
                    let ets = Seq.fold (fun ts (k, v) -> 
                                           match Map.tryFind k ts with
                                           | None -> Map.add k (Set.singleton v) ts
                                           | Some vs -> Map.add k (Set.add v vs) ts)
                                       ts
                                       t
                    Map.add e ets G.tags

                t_ex = 
                  match s.exec with
                  | None -> G.t_ex
                  | Some k -> Map.add e k G.t_ex

                t_re = 
                  match s.pend with
                  | None -> G.t_re
                  | Some d -> Map.add e d G.t_re
            } 
        | Seq exs -> exs |> List.fold (loop s) G
        | Sub (ev, H) -> 
            let G = loop s G (Evt ev)
            { G with defs = evts_of ex |> List.fold (fun d e -> extend e H d) G.defs }

    loop { excl=false; incl=false; pend=None ; local=false ; exec=None } G0 ex

let add_group G (title, H) = 
    unchecked_subsuming_union G 
        { H with groups = (title, H.events, H.groups)
                          |> Set.singleton
                          |> Grouping.Partition }

let rec add_relation G (ex, r, fx) =
    let add_rel r x G y =
        match r with
              CON k -> { G with cond_on = extend y x G.cond_on 
                                t_c     = Map.add (x,y) k G.t_c } 
            | RES k -> { G with resp    = extend x y G.resp 
                                t_r     = Map.add (x,y) k G.t_r }     
            | INC -> { G with incl    = extend x y G.incl }    
            | EXC -> { G with excl    = extend x y G.excl }    
            | MIL -> { G with mile_on = extend y x G.mile_on } 
            | CONRES -> failwith "Internal error."
    let G = G |> flip add_event ex |> flip add_event fx 
    match r with 
      CONRES -> G |> flip add_relation (ex, CON 0, fx) |> flip add_relation (ex, RES 0, fx)
    | _ -> let xs = evts_of ex
           let ys = evts_of fx
           List.fold (fun G' x -> List.fold (add_rel r x) G' ys) G xs

let add_relations G rels = List.fold add_relation G rels

let add_guarded_relations G rels guard = 
    let G0 = 
        rels 
        |> List.fold (fun G' (ex, _, fx) -> G' |> flip add_event ex |> flip add_event fx)
                     G
    { G0 with conds = (guard, add_relations DCR.empty rels) :: G.conds }

let bridge = function 
    | (x, _, _) :: _ -> 
        (* Avoid redefining events. *)
        labelled_evts_of x |> List.map Evt |> Seq
    | _ -> failwith "Internal error."

let patch_groups G = 
    let names = Grouping.names G.groups |> Set.ofSeq
    let fmap m = Map.filter (fun e _ -> Set.contains e names |> not) m
    { G with 
        events = Set.difference G.events names
        labels = fmap G.labels 
        exec = Set.difference G.exec names
        insi = Set.difference G.insi names
        pend = Set.difference G.pend names 
        tags = fmap G.tags }
    // TODO. Presumably, we should have the ability to have "local" groups. 
    //       Or maybe these are the unnamed ones?


# 182 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | PARALLEL
  | GROUP
  | WHEN
  | LTLT
  | GTGT
  | RBRB
  | LBLB
  | TRUE
  | FALSE
  | LT
  | GT
  | EQ
  | NEQ
  | CONCAT
  | AND
  | OR
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | QUESTION
  | COMMA
  | EOF
  | MINUS
  | PLUS
  | BANG
  | SLASH
  | COLON
  | CHECKMARK
  | ROUTE
  | NUM of (int)
  | ARROW of (rel)
  | SPLITCONHEAD
  | SPLITCONTAIL
  | SPLITRESHEAD
  | SPLITRESTAIL
  | IID of (string)
  | ID of (string)
  | STR of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_PARALLEL
    | TOKEN_GROUP
    | TOKEN_WHEN
    | TOKEN_LTLT
    | TOKEN_GTGT
    | TOKEN_RBRB
    | TOKEN_LBLB
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_CONCAT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_QUESTION
    | TOKEN_COMMA
    | TOKEN_EOF
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_BANG
    | TOKEN_SLASH
    | TOKEN_COLON
    | TOKEN_CHECKMARK
    | TOKEN_ROUTE
    | TOKEN_NUM
    | TOKEN_ARROW
    | TOKEN_SPLITCONHEAD
    | TOKEN_SPLITCONTAIL
    | TOKEN_SPLITRESHEAD
    | TOKEN_SPLITRESTAIL
    | TOKEN_IID
    | TOKEN_ID
    | TOKEN_STR
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startlabel
    | NONTERM__startaction
    | NONTERM__startdecls
    | NONTERM_decls
    | NONTERM_exprs
    | NONTERM_group
    | NONTERM_relation
    | NONTERM_arrow
    | NONTERM_event
    | NONTERM_opt_time
    | NONTERM_events
    | NONTERM_atom
    | NONTERM_nucleus
    | NONTERM_evinfo
    | NONTERM_str
    | NONTERM_strs
    | NONTERM_expr
    | NONTERM_paras
    | NONTERM_paras1
    | NONTERM_num1
    | NONTERM_ids
    | NONTERM_ids1
    | NONTERM_action
    | NONTERM_label
    | NONTERM_id

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | PARALLEL  -> 0 
  | GROUP  -> 1 
  | WHEN  -> 2 
  | LTLT  -> 3 
  | GTGT  -> 4 
  | RBRB  -> 5 
  | LBLB  -> 6 
  | TRUE  -> 7 
  | FALSE  -> 8 
  | LT  -> 9 
  | GT  -> 10 
  | EQ  -> 11 
  | NEQ  -> 12 
  | CONCAT  -> 13 
  | AND  -> 14 
  | OR  -> 15 
  | LPAR  -> 16 
  | RPAR  -> 17 
  | LBRACE  -> 18 
  | RBRACE  -> 19 
  | LBRACK  -> 20 
  | RBRACK  -> 21 
  | QUESTION  -> 22 
  | COMMA  -> 23 
  | EOF  -> 24 
  | MINUS  -> 25 
  | PLUS  -> 26 
  | BANG  -> 27 
  | SLASH  -> 28 
  | COLON  -> 29 
  | CHECKMARK  -> 30 
  | ROUTE  -> 31 
  | NUM _ -> 32 
  | ARROW _ -> 33 
  | SPLITCONHEAD  -> 34 
  | SPLITCONTAIL  -> 35 
  | SPLITRESHEAD  -> 36 
  | SPLITRESTAIL  -> 37 
  | IID _ -> 38 
  | ID _ -> 39 
  | STR _ -> 40 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_PARALLEL 
  | 1 -> TOKEN_GROUP 
  | 2 -> TOKEN_WHEN 
  | 3 -> TOKEN_LTLT 
  | 4 -> TOKEN_GTGT 
  | 5 -> TOKEN_RBRB 
  | 6 -> TOKEN_LBLB 
  | 7 -> TOKEN_TRUE 
  | 8 -> TOKEN_FALSE 
  | 9 -> TOKEN_LT 
  | 10 -> TOKEN_GT 
  | 11 -> TOKEN_EQ 
  | 12 -> TOKEN_NEQ 
  | 13 -> TOKEN_CONCAT 
  | 14 -> TOKEN_AND 
  | 15 -> TOKEN_OR 
  | 16 -> TOKEN_LPAR 
  | 17 -> TOKEN_RPAR 
  | 18 -> TOKEN_LBRACE 
  | 19 -> TOKEN_RBRACE 
  | 20 -> TOKEN_LBRACK 
  | 21 -> TOKEN_RBRACK 
  | 22 -> TOKEN_QUESTION 
  | 23 -> TOKEN_COMMA 
  | 24 -> TOKEN_EOF 
  | 25 -> TOKEN_MINUS 
  | 26 -> TOKEN_PLUS 
  | 27 -> TOKEN_BANG 
  | 28 -> TOKEN_SLASH 
  | 29 -> TOKEN_COLON 
  | 30 -> TOKEN_CHECKMARK 
  | 31 -> TOKEN_ROUTE 
  | 32 -> TOKEN_NUM 
  | 33 -> TOKEN_ARROW 
  | 34 -> TOKEN_SPLITCONHEAD 
  | 35 -> TOKEN_SPLITCONTAIL 
  | 36 -> TOKEN_SPLITRESHEAD 
  | 37 -> TOKEN_SPLITRESTAIL 
  | 38 -> TOKEN_IID 
  | 39 -> TOKEN_ID 
  | 40 -> TOKEN_STR 
  | 43 -> TOKEN_end_of_input
  | 41 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startlabel 
    | 1 -> NONTERM__startaction 
    | 2 -> NONTERM__startdecls 
    | 3 -> NONTERM_decls 
    | 4 -> NONTERM_exprs 
    | 5 -> NONTERM_exprs 
    | 6 -> NONTERM_exprs 
    | 7 -> NONTERM_exprs 
    | 8 -> NONTERM_exprs 
    | 9 -> NONTERM_group 
    | 10 -> NONTERM_group 
    | 11 -> NONTERM_relation 
    | 12 -> NONTERM_relation 
    | 13 -> NONTERM_arrow 
    | 14 -> NONTERM_arrow 
    | 15 -> NONTERM_arrow 
    | 16 -> NONTERM_event 
    | 17 -> NONTERM_event 
    | 18 -> NONTERM_event 
    | 19 -> NONTERM_event 
    | 20 -> NONTERM_event 
    | 21 -> NONTERM_event 
    | 22 -> NONTERM_event 
    | 23 -> NONTERM_event 
    | 24 -> NONTERM_opt_time 
    | 25 -> NONTERM_opt_time 
    | 26 -> NONTERM_events 
    | 27 -> NONTERM_events 
    | 28 -> NONTERM_atom 
    | 29 -> NONTERM_atom 
    | 30 -> NONTERM_atom 
    | 31 -> NONTERM_atom 
    | 32 -> NONTERM_atom 
    | 33 -> NONTERM_atom 
    | 34 -> NONTERM_nucleus 
    | 35 -> NONTERM_nucleus 
    | 36 -> NONTERM_evinfo 
    | 37 -> NONTERM_evinfo 
    | 38 -> NONTERM_evinfo 
    | 39 -> NONTERM_str 
    | 40 -> NONTERM_str 
    | 41 -> NONTERM_str 
    | 42 -> NONTERM_strs 
    | 43 -> NONTERM_strs 
    | 44 -> NONTERM_expr 
    | 45 -> NONTERM_expr 
    | 46 -> NONTERM_expr 
    | 47 -> NONTERM_expr 
    | 48 -> NONTERM_expr 
    | 49 -> NONTERM_expr 
    | 50 -> NONTERM_expr 
    | 51 -> NONTERM_expr 
    | 52 -> NONTERM_expr 
    | 53 -> NONTERM_expr 
    | 54 -> NONTERM_expr 
    | 55 -> NONTERM_expr 
    | 56 -> NONTERM_paras 
    | 57 -> NONTERM_paras 
    | 58 -> NONTERM_paras1 
    | 59 -> NONTERM_paras1 
    | 60 -> NONTERM_num1 
    | 61 -> NONTERM_num1 
    | 62 -> NONTERM_ids 
    | 63 -> NONTERM_ids 
    | 64 -> NONTERM_ids1 
    | 65 -> NONTERM_ids1 
    | 66 -> NONTERM_action 
    | 67 -> NONTERM_action 
    | 68 -> NONTERM_action 
    | 69 -> NONTERM_action 
    | 70 -> NONTERM_label 
    | 71 -> NONTERM_label 
    | 72 -> NONTERM_label 
    | 73 -> NONTERM_label 
    | 74 -> NONTERM_id 
    | 75 -> NONTERM_id 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 43 
let _fsyacc_tagOfErrorTerminal = 41

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | PARALLEL  -> "PARALLEL" 
  | GROUP  -> "GROUP" 
  | WHEN  -> "WHEN" 
  | LTLT  -> "LTLT" 
  | GTGT  -> "GTGT" 
  | RBRB  -> "RBRB" 
  | LBLB  -> "LBLB" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | CONCAT  -> "CONCAT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | QUESTION  -> "QUESTION" 
  | COMMA  -> "COMMA" 
  | EOF  -> "EOF" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | BANG  -> "BANG" 
  | SLASH  -> "SLASH" 
  | COLON  -> "COLON" 
  | CHECKMARK  -> "CHECKMARK" 
  | ROUTE  -> "ROUTE" 
  | NUM _ -> "NUM" 
  | ARROW _ -> "ARROW" 
  | SPLITCONHEAD  -> "SPLITCONHEAD" 
  | SPLITCONTAIL  -> "SPLITCONTAIL" 
  | SPLITRESHEAD  -> "SPLITRESHEAD" 
  | SPLITRESTAIL  -> "SPLITRESTAIL" 
  | IID _ -> "IID" 
  | ID _ -> "ID" 
  | STR _ -> "STR" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | PARALLEL  -> (null : System.Object) 
  | GROUP  -> (null : System.Object) 
  | WHEN  -> (null : System.Object) 
  | LTLT  -> (null : System.Object) 
  | GTGT  -> (null : System.Object) 
  | RBRB  -> (null : System.Object) 
  | LBLB  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | CONCAT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | CHECKMARK  -> (null : System.Object) 
  | ROUTE  -> (null : System.Object) 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SPLITCONHEAD  -> (null : System.Object) 
  | SPLITCONTAIL  -> (null : System.Object) 
  | SPLITRESHEAD  -> (null : System.Object) 
  | SPLITRESTAIL  -> (null : System.Object) 
  | IID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 4us; 5us; 5us; 65535us; 4us; 6us; 18us; 8us; 21us; 9us; 62us; 10us; 65us; 11us; 5us; 65535us; 6us; 16us; 8us; 16us; 9us; 16us; 10us; 16us; 11us; 16us; 6us; 65535us; 6us; 12us; 8us; 12us; 9us; 12us; 10us; 12us; 11us; 12us; 24us; 25us; 2us; 65535us; 15us; 24us; 23us; 24us; 14us; 65535us; 6us; 15us; 8us; 15us; 9us; 15us; 10us; 15us; 11us; 15us; 24us; 23us; 34us; 35us; 36us; 37us; 39us; 40us; 41us; 42us; 44us; 45us; 47us; 48us; 49us; 53us; 53us; 53us; 3us; 65535us; 38us; 39us; 43us; 44us; 46us; 47us; 2us; 65535us; 49us; 50us; 53us; 54us; 14us; 65535us; 6us; 33us; 8us; 33us; 9us; 33us; 10us; 33us; 11us; 33us; 24us; 33us; 34us; 33us; 36us; 33us; 39us; 33us; 41us; 33us; 44us; 33us; 47us; 33us; 49us; 33us; 53us; 33us; 14us; 65535us; 6us; 55us; 8us; 55us; 9us; 55us; 10us; 55us; 11us; 55us; 24us; 55us; 34us; 55us; 36us; 55us; 39us; 55us; 41us; 55us; 44us; 55us; 47us; 55us; 49us; 55us; 53us; 55us; 1us; 65535us; 68us; 69us; 20us; 65535us; 0us; 115us; 2us; 115us; 6us; 67us; 8us; 67us; 9us; 67us; 10us; 67us; 11us; 67us; 17us; 20us; 24us; 67us; 34us; 67us; 36us; 67us; 39us; 67us; 41us; 67us; 44us; 67us; 47us; 67us; 49us; 67us; 53us; 67us; 69us; 71us; 73us; 74us; 108us; 115us; 0us; 65535us; 13us; 65535us; 13us; 14us; 56us; 57us; 59us; 60us; 87us; 78us; 88us; 79us; 89us; 80us; 90us; 81us; 91us; 81us; 92us; 82us; 93us; 83us; 94us; 84us; 111us; 85us; 113us; 86us; 0us; 65535us; 0us; 65535us; 2us; 65535us; 101us; 102us; 104us; 106us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 2us; 3us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 110us; 2us; 103us; 108us; 109us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 3us; 5us; 11us; 17us; 24us; 27us; 42us; 46us; 49us; 64us; 79us; 81us; 102us; 103us; 117us; 118us; 119us; 122us; 123us; 124us; 126us; 128us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 5us; 3us; 4us; 5us; 6us; 7us; 1us; 3us; 5us; 4us; 5us; 6us; 7us; 9us; 5us; 4us; 5us; 6us; 7us; 10us; 5us; 4us; 5us; 6us; 7us; 31us; 5us; 4us; 5us; 6us; 7us; 32us; 2us; 4us; 5us; 1us; 5us; 8us; 5us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 3us; 6us; 11us; 12us; 1us; 7us; 2us; 9us; 10us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 3us; 11us; 11us; 12us; 2us; 11us; 12us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 26us; 1us; 26us; 6us; 28us; 29us; 30us; 31us; 32us; 33us; 1us; 29us; 8us; 29us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 29us; 1us; 30us; 8us; 30us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 30us; 1us; 31us; 1us; 31us; 2us; 32us; 33us; 1us; 32us; 1us; 32us; 2us; 34us; 35us; 1us; 35us; 3us; 35us; 36us; 37us; 1us; 35us; 1us; 36us; 2us; 37us; 39us; 1us; 37us; 1us; 37us; 1us; 39us; 1us; 40us; 1us; 41us; 8us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 8us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 8us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 8us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 8us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 8us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 8us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 8us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 71us; 8us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 73us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 2us; 47us; 71us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 2us; 60us; 61us; 1us; 61us; 1us; 61us; 4us; 66us; 67us; 68us; 69us; 2us; 67us; 68us; 1us; 67us; 1us; 68us; 1us; 68us; 1us; 69us; 1us; 69us; 4us; 70us; 71us; 72us; 73us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 73us; 1us; 74us; 1us; 75us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 18us; 20us; 26us; 32us; 38us; 44us; 47us; 49us; 58us; 62us; 64us; 67us; 69us; 71us; 73us; 75us; 77us; 81us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 118us; 120us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 142us; 144us; 151us; 153us; 162us; 164us; 166us; 175us; 177us; 179us; 181us; 184us; 186us; 188us; 191us; 193us; 197us; 199us; 201us; 204us; 206us; 208us; 210us; 212us; 214us; 223us; 232us; 241us; 250us; 259us; 268us; 277us; 286us; 295us; 297us; 299us; 301us; 303us; 306us; 308us; 310us; 312us; 314us; 316us; 318us; 320us; 322us; 325us; 327us; 329us; 334us; 337us; 339us; 341us; 343us; 345us; 347us; 352us; 354us; 356us; 358us; 360us; 362us; |]
let _fsyacc_action_rows = 117
let _fsyacc_actionTableElements = [|4us; 32768us; 32us; 77us; 38us; 116us; 39us; 75us; 40us; 76us; 0us; 49152us; 4us; 32768us; 32us; 77us; 38us; 116us; 39us; 75us; 40us; 76us; 0us; 49152us; 0us; 16392us; 0us; 49152us; 12us; 32768us; 1us; 17us; 16us; 49us; 24us; 7us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 0us; 16387us; 12us; 32768us; 1us; 17us; 16us; 49us; 19us; 19us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 12us; 32768us; 1us; 17us; 16us; 49us; 19us; 22us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 12us; 32768us; 1us; 17us; 16us; 49us; 19us; 63us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 12us; 32768us; 1us; 17us; 16us; 49us; 19us; 66us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 1us; 16388us; 2us; 13us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 7us; 16389us; 9us; 89us; 10us; 90us; 11us; 92us; 12us; 93us; 13us; 94us; 14us; 87us; 15us; 88us; 3us; 16390us; 33us; 26us; 35us; 27us; 37us; 30us; 0us; 16391us; 4us; 32768us; 18us; 18us; 32us; 77us; 39us; 75us; 40us; 76us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 18us; 21us; 0us; 16392us; 0us; 16394us; 3us; 16395us; 33us; 26us; 35us; 27us; 37us; 30us; 10us; 32768us; 16us; 49us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 0us; 16396us; 0us; 16397us; 1us; 32768us; 32us; 28us; 1us; 32768us; 34us; 29us; 0us; 16398us; 1us; 32768us; 32us; 31us; 1us; 32768us; 36us; 32us; 0us; 16399us; 0us; 16400us; 10us; 32768us; 16us; 49us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 0us; 16401us; 10us; 32768us; 16us; 49us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 0us; 16402us; 1us; 16409us; 32us; 52us; 10us; 32768us; 16us; 49us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 0us; 16403us; 10us; 32768us; 16us; 49us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 0us; 16404us; 1us; 16409us; 32us; 52us; 10us; 32768us; 16us; 49us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 0us; 16405us; 1us; 16409us; 32us; 52us; 10us; 32768us; 16us; 49us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 0us; 16406us; 10us; 16411us; 16us; 49us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 1us; 32768us; 17us; 51us; 0us; 16407us; 0us; 16408us; 10us; 16411us; 16us; 49us; 25us; 34us; 26us; 36us; 27us; 38us; 28us; 41us; 29us; 43us; 30us; 46us; 32us; 77us; 39us; 75us; 40us; 76us; 0us; 16410us; 4us; 16412us; 3us; 56us; 6us; 59us; 18us; 62us; 22us; 64us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 8us; 32768us; 4us; 58us; 9us; 89us; 10us; 90us; 11us; 92us; 12us; 93us; 13us; 94us; 14us; 87us; 15us; 88us; 0us; 16413us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 8us; 32768us; 5us; 61us; 9us; 89us; 10us; 90us; 11us; 92us; 12us; 93us; 13us; 94us; 14us; 87us; 15us; 88us; 0us; 16414us; 0us; 16392us; 0us; 16415us; 1us; 16417us; 18us; 65us; 0us; 16392us; 0us; 16416us; 1us; 16418us; 20us; 68us; 0us; 16422us; 4us; 32768us; 21us; 70us; 32us; 77us; 39us; 72us; 40us; 76us; 0us; 16419us; 0us; 16420us; 1us; 16423us; 11us; 73us; 3us; 32768us; 32us; 77us; 39us; 75us; 40us; 76us; 0us; 16421us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 4us; 16428us; 10us; 90us; 11us; 92us; 12us; 93us; 13us; 94us; 4us; 16429us; 10us; 90us; 11us; 92us; 12us; 93us; 13us; 94us; 7us; 16430us; 9us; 89us; 10us; 90us; 11us; 92us; 12us; 93us; 13us; 94us; 14us; 87us; 15us; 88us; 7us; 16431us; 9us; 89us; 10us; 90us; 11us; 92us; 12us; 93us; 13us; 94us; 14us; 87us; 15us; 88us; 7us; 16432us; 9us; 89us; 10us; 90us; 11us; 92us; 12us; 93us; 13us; 94us; 14us; 87us; 15us; 88us; 7us; 16433us; 9us; 89us; 10us; 90us; 11us; 92us; 12us; 93us; 13us; 94us; 14us; 87us; 15us; 88us; 7us; 16434us; 9us; 89us; 10us; 90us; 11us; 92us; 12us; 93us; 13us; 94us; 14us; 87us; 15us; 88us; 7us; 32768us; 9us; 89us; 10us; 91us; 11us; 92us; 12us; 93us; 13us; 94us; 14us; 87us; 15us; 88us; 8us; 32768us; 5us; 114us; 9us; 89us; 10us; 90us; 11us; 92us; 12us; 93us; 13us; 94us; 14us; 87us; 15us; 88us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 5us; 16455us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 1us; 16444us; 23us; 101us; 1us; 32768us; 32us; 100us; 0us; 16445us; 2us; 16450us; 0us; 108us; 9us; 104us; 2us; 32768us; 10us; 105us; 32us; 100us; 0us; 16451us; 1us; 32768us; 10us; 107us; 0us; 16452us; 4us; 32768us; 32us; 77us; 38us; 116us; 39us; 75us; 40us; 76us; 0us; 16453us; 3us; 16454us; 6us; 113us; 9us; 111us; 22us; 112us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 0us; 16456us; 5us; 32768us; 7us; 95us; 8us; 96us; 32us; 98us; 39us; 97us; 40us; 99us; 0us; 16457us; 0us; 16458us; 0us; 16459us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 11us; 12us; 13us; 14us; 27us; 28us; 41us; 54us; 67us; 80us; 82us; 88us; 96us; 100us; 101us; 106us; 107us; 108us; 110us; 111us; 112us; 116us; 127us; 128us; 129us; 131us; 133us; 134us; 136us; 138us; 139us; 140us; 151us; 152us; 163us; 164us; 166us; 177us; 178us; 189us; 190us; 192us; 203us; 204us; 206us; 217us; 218us; 229us; 231us; 232us; 233us; 244us; 245us; 250us; 256us; 265us; 266us; 272us; 281us; 282us; 283us; 284us; 286us; 287us; 288us; 290us; 291us; 296us; 297us; 298us; 300us; 304us; 305us; 306us; 307us; 308us; 313us; 318us; 326us; 334us; 342us; 350us; 358us; 366us; 375us; 381us; 387us; 393us; 399us; 405us; 411us; 417us; 423us; 424us; 425us; 426us; 427us; 428us; 430us; 432us; 433us; 436us; 439us; 440us; 442us; 443us; 448us; 449us; 453us; 459us; 460us; 466us; 467us; 468us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 2us; 2us; 4us; 2us; 2us; 0us; 4us; 5us; 3us; 3us; 1us; 3us; 3us; 1us; 2us; 2us; 3us; 2us; 3us; 3us; 3us; 1us; 0us; 2us; 0us; 1us; 4us; 4us; 4us; 5us; 2us; 1us; 4us; 2us; 4us; 0us; 1us; 1us; 1us; 2us; 0us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 0us; 1us; 1us; 3us; 1us; 3us; 0us; 1us; 1us; 3us; 1us; 3us; 4us; 3us; 1us; 4us; 2us; 4us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 12us; 12us; 13us; 13us; 13us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; 22us; 23us; 23us; 23us; 23us; 24us; 24us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 16393us; 65535us; 65535us; 16394us; 65535us; 65535us; 16396us; 16397us; 65535us; 65535us; 16398us; 65535us; 65535us; 16399us; 16400us; 65535us; 16401us; 65535us; 16402us; 65535us; 65535us; 16403us; 65535us; 16404us; 65535us; 65535us; 16405us; 65535us; 65535us; 16406us; 65535us; 65535us; 16407us; 16408us; 65535us; 16410us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 16414us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 16419us; 16420us; 65535us; 65535us; 16421us; 16423us; 16424us; 16425us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16435us; 16436us; 16437us; 16438us; 16439us; 65535us; 65535us; 16445us; 65535us; 65535us; 16451us; 65535us; 16452us; 65535us; 16453us; 65535us; 65535us; 16456us; 65535us; 16457us; 16458us; 16459us; |]
let _fsyacc_reductions ()  =    [| 
# 576 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : label)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startlabel));
# 585 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : action)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startaction));
# 594 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : dcr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startdecls));
# 603 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "Parser.fsy"
                                                               patch_groups _1 
                   )
# 212 "Parser.fsy"
                 : dcr));
# 614 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'relation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "Parser.fsy"
                                                               add_relations _1 _2 
                   )
# 215 "Parser.fsy"
                 : 'exprs));
# 626 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'relation)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "Parser.fsy"
                                                               add_guarded_relations _1 _2 _4 
                   )
# 216 "Parser.fsy"
                 : 'exprs));
# 639 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'event)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                                                               add_event _1 _2 
                   )
# 217 "Parser.fsy"
                 : 'exprs));
# 651 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'group)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "Parser.fsy"
                                                               add_group _1 _2 
                   )
# 218 "Parser.fsy"
                 : 'exprs));
# 663 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "Parser.fsy"
                                                               DCR.empty 
                   )
# 219 "Parser.fsy"
                 : 'exprs));
# 673 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "Parser.fsy"
                                                               None, _3 
                   )
# 222 "Parser.fsy"
                 : 'group));
# 684 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "Parser.fsy"
                                                               Some _2, _4 
                   )
# 223 "Parser.fsy"
                 : 'group));
# 696 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'event)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arrow)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'event)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "Parser.fsy"
                                                               [_1, _2, _3] 
                   )
# 226 "Parser.fsy"
                 : 'relation));
# 709 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'event)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arrow)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'relation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "Parser.fsy"
                                                               (_1, _2, bridge _3) :: _3 
                   )
# 227 "Parser.fsy"
                 : 'relation));
# 722 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : rel)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "Parser.fsy"
                                                               _1 
                   )
# 230 "Parser.fsy"
                 : 'arrow));
# 733 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                                                               CON _2 
                   )
# 231 "Parser.fsy"
                 : 'arrow));
# 744 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "Parser.fsy"
                                                               RES _2 
                   )
# 232 "Parser.fsy"
                 : 'arrow));
# 755 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "Parser.fsy"
                                                               _1 
                   )
# 235 "Parser.fsy"
                 : 'event));
# 766 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'event)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "Parser.fsy"
                                                               Excl _2 
                   )
# 236 "Parser.fsy"
                 : 'event));
# 777 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'event)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "Parser.fsy"
                                                               Incl _2 
                   )
# 237 "Parser.fsy"
                 : 'event));
# 788 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_time)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'event)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "Parser.fsy"
                                                               Pend (defaultArg _2 DCR.infinity, _3) 
                   )
# 238 "Parser.fsy"
                 : 'event));
# 800 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'event)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "Parser.fsy"
                                                               Local _2 
                   )
# 239 "Parser.fsy"
                 : 'event));
# 811 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_time)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'event)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "Parser.fsy"
                                                               Exec (defaultArg _2 0, _3) 
                   )
# 240 "Parser.fsy"
                 : 'event));
# 823 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'opt_time)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'event)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "Parser.fsy"
                                                               Exec (defaultArg _2 0, _3) 
                   )
# 241 "Parser.fsy"
                 : 'event));
# 835 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'events)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "Parser.fsy"
                                                               Seq _2 
                   )
# 242 "Parser.fsy"
                 : 'event));
# 846 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "Parser.fsy"
                                                               Some _1 
                   )
# 245 "Parser.fsy"
                 : 'opt_time));
# 857 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "Parser.fsy"
                                                               None 
                   )
# 246 "Parser.fsy"
                 : 'opt_time));
# 867 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'event)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'events)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "Parser.fsy"
                                                               _1 :: _2 
                   )
# 249 "Parser.fsy"
                 : 'events));
# 879 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "Parser.fsy"
                                                               [] 
                   )
# 250 "Parser.fsy"
                 : 'events));
# 889 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'nucleus)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "Parser.fsy"
                                                               Evt (_1.ev, Neutral <| lab _1, _1.tags) 
                   )
# 253 "Parser.fsy"
                 : 'atom));
# 900 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'nucleus)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 254 "Parser.fsy"
                                                               Evt (_1.ev, Output (lab _1, _3), _1.tags) 
                   )
# 254 "Parser.fsy"
                 : 'atom));
# 912 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'nucleus)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "Parser.fsy"
                                                               Evt (_1.ev, Computation (lab _1, _3), _1.tags) 
                   )
# 255 "Parser.fsy"
                 : 'atom));
# 924 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'nucleus)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "Parser.fsy"
                                                               Sub ((_1.ev, Neutral (lab _1), _1.tags), _3)  
                   )
# 256 "Parser.fsy"
                 : 'atom));
# 936 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'nucleus)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "Parser.fsy"
                                                               Sub ((_1.ev, Input (lab _1), _1.tags), _4) 
                   )
# 258 "Parser.fsy"
                 : 'atom));
# 948 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'nucleus)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "Parser.fsy"
                                                               Evt (_1.ev, Input (lab _1), _1.tags) 
                   )
# 259 "Parser.fsy"
                 : 'atom));
# 959 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "Parser.fsy"
                                                               {ev=_1; l=Some _1; tags=[]} 
                   )
# 261 "Parser.fsy"
                 : 'nucleus));
# 970 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'evinfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "Parser.fsy"
                                                               {_3 with ev=_1} 
                   )
# 262 "Parser.fsy"
                 : 'nucleus));
# 982 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'evinfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 266 "Parser.fsy"
                                                               {_1 with l=Some _2} 
                   )
# 266 "Parser.fsy"
                 : 'evinfo));
# 994 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'evinfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "Parser.fsy"
                                                               {_1 with tags=(_2,_4) :: _1.tags} 
                   )
# 267 "Parser.fsy"
                 : 'evinfo));
# 1007 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "Parser.fsy"
                                                               {ev=""; l=None; tags=[]} 
                   )
# 268 "Parser.fsy"
                 : 'evinfo));
# 1017 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 271 "Parser.fsy"
                                                               _1 
                   )
# 271 "Parser.fsy"
                 : 'str));
# 1028 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "Parser.fsy"
                                                               _1 
                   )
# 272 "Parser.fsy"
                 : 'str));
# 1039 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "Parser.fsy"
                                                               string _1 
                   )
# 273 "Parser.fsy"
                 : 'str));
# 1050 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'strs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "Parser.fsy"
                                                               _1 :: _2 
                   )
# 276 "Parser.fsy"
                 : 'strs));
# 1062 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "Parser.fsy"
                                                               [] 
                   )
# 277 "Parser.fsy"
                 : 'strs));
# 1072 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 282 "Parser.fsy"
                                                               Data.And (_1, _3) 
                   )
# 282 "Parser.fsy"
                 : 'expr));
# 1084 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "Parser.fsy"
                                                               Data.Or (_1, _3) 
                   )
# 283 "Parser.fsy"
                 : 'expr));
# 1096 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "Parser.fsy"
                                                               Data.Lt (_1,_3) 
                   )
# 284 "Parser.fsy"
                 : 'expr));
# 1108 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 285 "Parser.fsy"
                                                               Data.Gt (_1,_3) 
                   )
# 285 "Parser.fsy"
                 : 'expr));
# 1120 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 286 "Parser.fsy"
                                                               Data.Eq (_1,_3) 
                   )
# 286 "Parser.fsy"
                 : 'expr));
# 1132 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 287 "Parser.fsy"
                                                               Data.Neq (_1,_3) 
                   )
# 287 "Parser.fsy"
                 : 'expr));
# 1144 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "Parser.fsy"
                                                               Data.Concat (_1, _3) 
                   )
# 288 "Parser.fsy"
                 : 'expr));
# 1156 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 289 "Parser.fsy"
                                                               Data.Const <| Data.Bool true 
                   )
# 289 "Parser.fsy"
                 : 'expr));
# 1166 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "Parser.fsy"
                                                               Data.Const <| Data.Bool false 
                   )
# 290 "Parser.fsy"
                 : 'expr));
# 1176 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 291 "Parser.fsy"
                                                               Data.Var _1 
                   )
# 291 "Parser.fsy"
                 : 'expr));
# 1187 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 292 "Parser.fsy"
                                                               Data.Const <| Data.Int _1 
                   )
# 292 "Parser.fsy"
                 : 'expr));
# 1198 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 293 "Parser.fsy"
                                                               Data.Const <| Data.String _1 
                   )
# 293 "Parser.fsy"
                 : 'expr));
# 1209 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "Parser.fsy"
                                                               [] 
                   )
# 296 "Parser.fsy"
                 : 'paras));
# 1219 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'paras1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 297 "Parser.fsy"
                                                               _1 
                   )
# 297 "Parser.fsy"
                 : 'paras));
# 1230 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 300 "Parser.fsy"
                                                               [_1] 
                   )
# 300 "Parser.fsy"
                 : 'paras1));
# 1241 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'paras1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 301 "Parser.fsy"
                 : 'paras1));
# 1253 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 305 "Parser.fsy"
                                                               [_1] 
                   )
# 305 "Parser.fsy"
                 : 'num1));
# 1264 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'num1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 306 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 306 "Parser.fsy"
                 : 'num1));
# 1276 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 308 "Parser.fsy"
                                                               [] 
                   )
# 308 "Parser.fsy"
                 : 'ids));
# 1286 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ids1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "Parser.fsy"
                                                               _1 
                   )
# 309 "Parser.fsy"
                 : 'ids));
# 1297 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "Parser.fsy"
                                                               [_1] 
                   )
# 311 "Parser.fsy"
                 : 'ids1));
# 1308 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ids1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 312 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 312 "Parser.fsy"
                 : 'ids1));
# 1320 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 316 "Parser.fsy"
                                                               Event _1 
                   )
# 316 "Parser.fsy"
                 : action));
# 1331 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 317 "Parser.fsy"
                                                               Recv (_1, []) 
                   )
# 317 "Parser.fsy"
                 : action));
# 1342 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'num1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 318 "Parser.fsy"
                                                               Recv (_1, _3 |> List.map Data.Int) 
                   )
# 318 "Parser.fsy"
                 : action));
# 1354 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 319 "Parser.fsy"
                                                               Sync (_1, _3) 
                   )
# 319 "Parser.fsy"
                 : action));
# 1366 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 322 "Parser.fsy"
                                                               Neutral _1 
                   )
# 322 "Parser.fsy"
                 : label));
# 1377 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 323 "Parser.fsy"
                                                               Output (_1, _3) 
                   )
# 323 "Parser.fsy"
                 : label));
# 1389 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "Parser.fsy"
                                                               Input _1 
                   )
# 324 "Parser.fsy"
                 : label));
# 1400 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 325 "Parser.fsy"
                                                               Computation (_1, _3) 
                   )
# 325 "Parser.fsy"
                 : label));
# 1412 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 327 "Parser.fsy"
                                                               _1 
                   )
# 327 "Parser.fsy"
                 : 'id));
# 1423 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 328 "Parser.fsy"
                                                               _1 
                   )
# 328 "Parser.fsy"
                 : 'id));
|]
# 1435 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 44;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let label lexer lexbuf : label =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let action lexer lexbuf : action =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
let decls lexer lexbuf : dcr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 4))
